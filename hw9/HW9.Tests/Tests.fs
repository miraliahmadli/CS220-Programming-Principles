namespace HW9.Tests

open HW9
open HW9.TextAnimation
open HW9.Mandelbrot
open System
open Microsoft.VisualStudio.TestTools.UnitTesting

module AnimateHelper =
  let checker a f =
    List.iter (fun a ->
      Assert.AreEqual (a, f ())) a

module StringHelper =
  let normalize (s: string) =
    s.Split [|'\n'|] |> Array.map (fun (s: string) -> s.TrimEnd ('\r'))
    |> Array.filter (fun s -> s <> "") |> Array.toList

type JsonForm =
  {
    width : int
    height : int
    values : int list list
  }

module JsonHelper =
  open Microsoft.FSharpLu.Json

  let tryParse s =
    match Compact.tryDeserialize<JsonForm> s with
    | Choice1Of2 c -> Some c
    | Choice2Of2 _ -> None

  let getResult s =
    let r = tryParse s
    Assert.IsTrue (Option.isSome r)
    Option.get r

  let areEqual a s =
    let r = getResult s
    Assert.AreEqual (a, r)

[<TestClass>]
type TestClass () =
  let simpleValue1 = [ [ 0 ; 1 ; 0 ; 2 ; 0 ] ]
  let simpleValue2 = [ [ 0 ; 1 ; 0 ; 2 ; 0 ] ; [ 3 ; 0 ; 4 ; 0 ; 5 ] ]

  [<TestMethod; Timeout(10000)>]
  member __.``Probblem1. A`` () =
    let f = makeAnimateFunction "aBCd"
    Assert.AreEqual ("ABCd", f ())
    Assert.AreEqual ("abCd", f ())

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. A`` () =
    let r = computeMandelbrot 4 2 100 -2.0 1.0 -1.0 1.0
    let a = [ [ 1 ; 3 ; 4 ; 4 ] ; [ 0 ; 0 ; 0 ; 0 ] ]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. B`` () =
    let r =
      computeMandelbrot 60 20 100 -2.0 1.0 -1.0 1.0 |> toString
      |> StringHelper.normalize
    let a =
      ["........................................ ...................";
       "............................................................";
       "....................................    ....................";
       "....................................    ....................";
       ".............................. ..          .................";
       "..............................                 .............";
       "............................                   .............";
       "...........................                     ............";
       ".................       ..                      ............";
       "................         .                      ............";
       "                                              ..............";
       "................         .                      ............";
       ".................       ..                      ............";
       "...........................                     ............";
       "............................                   .............";
       "..............................                 .............";
       ".............................. ..          .................";
       "....................................    ....................";
       "....................................    ....................";
       "............................................................"]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. C`` () =
    let r = computeMandelbrot 60 20 100 -2.0 1.0 -1.0 1.0 |> toJsonString
    let v =
      [[1;1;1;1;1;1;2;2;2;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;5;5;6;7;11;9;11;0;5;4;4;4;4;3;3;3;3;2;2;2;2;2;2;2;2;2;2];
       [1;1;1;1;1;2;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;4;5;5;5;6;8;9;36;24;11;8;6;5;5;4;4;4;4;3;3;3;3;3;2;2;2;2;2;2;2];
       [1;1;1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;4;5;5;6;6;7;8;14;0;0;0;0;18;8;6;5;5;5;5;4;4;3;3;3;3;3;3;2;2;2;2;2];
       [1;1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;5;5;6;7;8;8;8;8;9;10;14;0;0;0;0;13;10;9;8;6;6;6;18;5;4;4;3;3;3;3;3;2;2;2;2];
       [1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;5;5;5;5;6;6;7;12;42;0;16;26;0;0;0;0;0;0;0;0;0;0;20;12;14;15;16;15;5;4;3;3;3;3;3;3;2;2;2];
       [1;1;2;3;3;3;3;3;3;3;3;3;3;3;4;4;5;5;5;5;5;5;5;6;6;6;8;14;12;62;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;20;7;6;5;4;3;3;3;3;3;3;2;2];
       [1;2;3;3;3;3;3;3;3;4;4;4;5;5;7;12;7;7;7;7;7;7;7;7;7;8;11;20;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;17;9;19;5;4;4;3;3;3;3;3;3;2];
       [1;3;3;3;4;4;4;4;4;4;5;5;5;6;7;10;16;20;12;13;35;13;11;9;9;11;24;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;15;8;6;4;4;3;3;3;3;3;3;3];
       [1;3;4;4;4;4;4;4;5;5;5;5;6;7;8;11;18;0;0;0;0;0;0;0;15;16;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;31;7;5;4;4;4;3;3;3;3;3;3];
       [1;4;4;4;4;4;6;6;6;6;7;8;12;13;14;22;0;0;0;0;0;0;0;0;0;33;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;8;6;5;4;4;4;3;3;3;3;3;3];
       [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;12;8;7;6;5;4;4;4;3;3;3;3;3;3];
       [1;4;4;4;4;4;6;6;6;6;7;8;12;13;14;22;0;0;0;0;0;0;0;0;0;33;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;8;6;5;4;4;4;3;3;3;3;3;3];
       [1;3;4;4;4;4;4;4;5;5;5;5;6;7;8;11;18;0;0;0;0;0;0;0;15;16;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;31;7;5;4;4;4;3;3;3;3;3;3];
       [1;3;3;3;4;4;4;4;4;4;5;5;5;6;7;10;16;20;12;13;35;13;11;9;9;11;24;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;15;8;6;4;4;3;3;3;3;3;3;3];
       [1;2;3;3;3;3;3;3;3;4;4;4;5;5;7;12;7;7;7;7;7;7;7;7;7;8;11;20;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;17;9;19;5;4;4;3;3;3;3;3;3;2];
       [1;1;2;3;3;3;3;3;3;3;3;3;3;3;4;4;5;5;5;5;5;5;5;6;6;6;8;14;12;62;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;20;7;6;5;4;3;3;3;3;3;3;2;2];
       [1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;5;5;5;5;6;6;7;12;42;0;16;26;0;0;0;0;0;0;0;0;0;0;20;12;14;15;16;15;5;4;3;3;3;3;3;3;2;2;2];
       [1;1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;5;5;6;7;8;8;8;8;9;10;14;0;0;0;0;13;10;9;8;6;6;6;18;5;4;4;3;3;3;3;3;2;2;2;2];
       [1;1;1;1;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;4;5;5;6;6;7;8;14;0;0;0;0;18;8;6;5;5;5;5;4;4;3;3;3;3;3;3;2;2;2;2;2];
       [1;1;1;1;1;2;2;2;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;4;4;4;4;4;4;4;5;5;5;6;8;9;36;24;11;8;6;5;5;4;4;4;4;3;3;3;3;3;2;2;2;2;2;2;2]]
    let a = {
      width = 60
      height = 20
      values = v
    }
    JsonHelper.areEqual a r

  (* Prob1 Hidden Tests *)
  [<TestMethod; Timeout(10000)>]
  member __.``Problem1. Normal Case`` () =
    let f = makeAnimateFunction "aBcDeFg"
    let a =
      ["ABcDeFg"; "abcDeFg"; "aBCDeFg"; "aBcdeFg"; "aBcDEFg"; "aBcDefg";
       "aBcDeFG"]
    AnimateHelper.checker a f

  [<TestMethod; Timeout(10000)>]
  member __.``Problem1. Boundary Case`` () =
    let f = makeAnimateFunction "aBcDeFg"
    let a =
      ["ABcDeFg"; "abcDeFg"; "aBCDeFg"; "aBcdeFg"; "aBcDEFg"; "aBcDefg";
       "aBcDeFG"; "ABcDeFg"; "abcDeFg"; "aBCDeFg"; "aBcdeFg"; "aBcDEFg";
       "aBcDefg"; "aBcDeFG"]
    AnimateHelper.checker a f

  [<TestMethod; Timeout(10000)>]
  member __.``Problem1. Two Different String Case`` () =
    let f = makeAnimateFunction "aaaaaa"
    let g = makeAnimateFunction "bbbbbb"
    AnimateHelper.checker ["Aaaaaa"; "aAaaaa"; "aaAaaa"] f
    AnimateHelper.checker ["Bbbbbb"; "bBbbbb"] g
    AnimateHelper.checker ["aaaAaa"; "aaaaAa"; "aaaaaA"] f
    AnimateHelper.checker ["bbBbbb"; "bbbBbb"; "bbbbBb"; "bbbbbB"] g

  (* Prob2 Hidden Tests *)
  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 1`` () =
    let r = computeMandelbrot 5 2 1 -5.0 5.0 -2.0 2.0
    let a = [[1; 1; 1; 1; 1]; [1; 1; 0; 0; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 2`` () =
    let r = computeMandelbrot 5 2 10 -5.0 5.0 -2.0 2.0
    let a = [[1; 1; 1; 1; 1]; [1; 1; 0; 3; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 3`` () =
    let r = computeMandelbrot 2 5 10 -2.0 2.0 -5.0 5.0
    let a = [[1; 1]; [1; 1]; [1; 0]; [1; 0]; [1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 4`` () =
    let r = computeMandelbrot 5 5 1 -1.0 1.0 -1.0 1.0
    let a =
      [[0; 0; 0; 0; 0]; [0; 0; 0; 0; 0]; [0; 0; 0; 0; 0]; [0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 5`` () =
    let r = computeMandelbrot 5 5 100 -1.0 1.0 -1.0 1.0
    let a =
      [[3; 4; 7; 4; 2]; [4; 12; 0; 12; 3]; [0; 0; 0; 0; 4]; [0; 0; 0; 0; 4];
       [4; 12; 0; 12; 3]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 6`` () =
    let r = computeMandelbrot 5 5 10 -10.0 10.0 -10.0 10.0
    let a =
      [[1; 1; 1; 1; 1]; [1; 1; 1; 1; 1]; [1; 1; 1; 1; 1]; [1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 7`` () =
    let r = computeMandelbrot 20 20 1 -1.0 1.0 -1.0 1.0
    let a =
      [[0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 8`` () =
    let r = computeMandelbrot 20 20 100 -1.0 1.0 -1.0 1.0
    let a =
      [[3; 3; 3; 3; 4; 4; 4; 5; 7; 9; 0; 4; 4; 3; 3; 2; 2; 2; 2; 2];
       [3; 3; 4; 4; 4; 4; 5; 6; 9; 24; 8; 5; 4; 4; 3; 3; 3; 2; 2; 2];
       [3; 4; 4; 4; 4; 5; 6; 8; 0; 0; 18; 6; 5; 5; 4; 3; 3; 3; 2; 2];
       [4; 4; 4; 5; 7; 8; 8; 10; 0; 0; 13; 9; 6; 6; 5; 4; 3; 3; 2; 2];
       [4; 5; 5; 6; 12; 0; 26; 0; 0; 0; 0; 0; 12; 15; 15; 4; 3; 3; 3; 2];
       [5; 5; 6; 8; 12; 0; 0; 0; 0; 0; 0; 0; 0; 0; 7; 5; 3; 3; 3; 2];
       [7; 7; 7; 11; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 9; 5; 4; 3; 3; 3];
       [35; 11; 9; 24; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 15; 6; 4; 3; 3; 3];
       [0; 0; 15; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 31; 5; 4; 3; 3; 3];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 8; 5; 4; 3; 3; 3];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 12; 7; 5; 4; 3; 3; 3];
       [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 8; 5; 4; 3; 3; 3];
       [0; 0; 15; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 31; 5; 4; 3; 3; 3];
       [35; 11; 9; 24; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 15; 6; 4; 3; 3; 3];
       [7; 7; 7; 11; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 9; 5; 4; 3; 3; 3];
       [5; 5; 6; 8; 12; 0; 0; 0; 0; 0; 0; 0; 0; 0; 7; 5; 3; 3; 3; 2];
       [4; 5; 5; 6; 12; 0; 26; 0; 0; 0; 0; 0; 12; 15; 15; 4; 3; 3; 3; 2];
       [4; 4; 4; 5; 7; 8; 8; 10; 0; 0; 13; 9; 6; 6; 5; 4; 3; 3; 2; 2];
       [3; 4; 4; 4; 4; 5; 6; 8; 0; 0; 18; 6; 5; 5; 4; 3; 3; 3; 2; 2];
       [3; 3; 4; 4; 4; 4; 5; 6; 9; 24; 8; 5; 4; 4; 3; 3; 3; 2; 2; 2]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 9`` () =
    let r = computeMandelbrot 20 20 1 -2.5 2.5 -2.5 2.5
    let a =
      [[1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1];
       [1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1];
       [1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1];
       [1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1];
       [1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1];
       [1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 10`` () =
    let r = computeMandelbrot 20 20 100 -2.5 2.5 -2.5 2.5
    let a =
      [[1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [1; 1; 1; 1; 2; 2; 2; 3; 3; 3; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1];
       [1; 1; 1; 1; 2; 3; 3; 3; 4; 6; 0; 4; 2; 2; 2; 2; 2; 1; 1; 1];
       [1; 1; 1; 2; 3; 3; 3; 4; 6; 22; 34; 5; 3; 2; 2; 2; 2; 2; 1; 1];
       [1; 1; 1; 3; 3; 4; 5; 6; 0; 0; 0; 0; 5; 3; 2; 2; 2; 2; 1; 1];
       [1; 1; 1; 4; 5; 9; 0; 13; 0; 0; 0; 0; 5; 3; 2; 2; 2; 2; 1; 1];
       [1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 5; 3; 3; 2; 2; 2; 2; 1];
       [1; 1; 1; 4; 5; 9; 0; 13; 0; 0; 0; 0; 5; 3; 2; 2; 2; 2; 1; 1];
       [1; 1; 1; 3; 3; 4; 5; 6; 0; 0; 0; 0; 5; 3; 2; 2; 2; 2; 1; 1];
       [1; 1; 1; 2; 3; 3; 3; 4; 6; 22; 34; 5; 3; 2; 2; 2; 2; 2; 1; 1];
       [1; 1; 1; 1; 2; 3; 3; 3; 4; 6; 0; 4; 2; 2; 2; 2; 2; 1; 1; 1];
       [1; 1; 1; 1; 2; 2; 2; 3; 3; 3; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1];
       [1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 11`` () =
    let r = computeMandelbrot 20 20 100 0.0 2.5 0.0 2.5
    let a =
      [[1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1];
       [4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [0; 4; 4; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [9; 5; 4; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1];
       [34; 7; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1];
       [0; 0; 17; 11; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 9; 5; 3; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 17; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 0; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 17; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 12`` () =
    let r = computeMandelbrot 20 20 100 -2.5 0.0 0.0 2.5
    let a =
      [[1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 3; 3; 3; 3; 3; 3; 3];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 3; 3; 3; 3; 3; 3; 3; 4; 5; 5];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 3; 3; 3; 3; 3; 3; 4; 4; 5; 6; 13];
       [1; 1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 3; 3; 4; 4; 4; 5; 13; 0];
       [1; 1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 3; 4; 4; 5; 6; 7; 22; 0];
       [1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 4; 4; 5; 5; 9; 20; 0; 0; 0];
       [1; 1; 1; 1; 1; 3; 3; 3; 3; 3; 4; 5; 5; 5; 6; 12; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 3; 3; 4; 4; 5; 14; 7; 8; 7; 8; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 4; 4; 4; 5; 6; 9; 0; 0; 24; 13; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 4; 4; 6; 7; 11; 19; 0; 0; 0; 26; 0; 0; 0; 0; 0]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 13`` () =
    let r = computeMandelbrot 20 20 100 -2.5 0.0 -2.5 0.0
    let a =
      [[1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 4; 4; 6; 7; 11; 19; 0; 0; 0; 26; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 4; 4; 4; 5; 6; 9; 0; 0; 24; 13; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 3; 3; 4; 4; 5; 14; 7; 8; 7; 8; 0; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 3; 3; 3; 3; 3; 4; 5; 5; 5; 6; 12; 0; 0; 0; 0];
       [1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 4; 4; 5; 5; 9; 20; 0; 0; 0];
       [1; 1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 3; 4; 4; 5; 6; 7; 22; 0];
       [1; 1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 3; 3; 4; 4; 4; 5; 13; 0];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 3; 3; 3; 3; 3; 3; 4; 4; 5; 6; 13];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 3; 3; 3; 3; 3; 3; 3; 4; 5; 5];
       [1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 3; 3; 3; 3; 3; 3; 3];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. computeMandelbrot Test 14`` () =
    let r = computeMandelbrot 20 20 100 0.0 2.5 -2.5 0.0
    let a =
      [[0; 0; 0; 7; 5; 4; 3; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1];
       [0; 0; 0; 17; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 0; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 17; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 0; 9; 5; 3; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [0; 0; 17; 11; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1];
       [34; 7; 5; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1];
       [9; 5; 4; 4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1];
       [0; 4; 4; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [4; 3; 3; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. toString Test 1`` () =
    let r = toString simpleValue1 |> StringHelper.normalize
    let a = [" . . "]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. toString Test 2`` () =
    let r = toString simpleValue2 |> StringHelper.normalize
    let a =
      [" . . ";
       ". . ."]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. toJsonString Test 1`` () =
    let values = simpleValue1
    let r = toJsonString values
    let a = {
      width = 5
      height = 1
      values = simpleValue1
    }
    JsonHelper.areEqual a r

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. toJsonString Test 2`` () =
    let values = simpleValue2
    let r = toJsonString values
    let a = {
      width = 5
      height = 2
      values = simpleValue2
    }
    JsonHelper.areEqual a r

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. Mandelbrot with toString Test 1`` () =
    let r =
      computeMandelbrot 5 5 100 -2.5 1.0 -2.0 2.0 |> toString
      |> StringHelper.normalize
    let a =
      [".....";
       ".....";
       "...  ";
       "...  ";
       "....."]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. Mandelbrot with toString Test 2`` () =
    let r =
      computeMandelbrot 20 20 100 -2.5 1.0 -2.0 2.0 |> toString
      |> StringHelper.normalize
    let a =
      ["....................";
       "....................";
       "....................";
       "....................";
       "....................";
       "....................";
       ".............. .....";
       ".............   ....";
       "...........      ...";
       "........  .      ...";
       "...             ....";
       "........  .      ...";
       "...........      ...";
       ".............   ....";
       ".............. .....";
       "....................";
       "....................";
       "....................";
       "....................";
       "...................."]
    Assert.AreEqual (a, r)

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. Mandelbrot with toJsonString Test 1`` () =
    let r = computeMandelbrot 5 5 100 -2.5 1.0 -2.0 2.0 |> toJsonString
    let v =
      [[1; 1; 1; 1; 1]; [1; 1; 3; 3; 2]; [1; 3; 7; 0; 0]; [1; 3; 7; 0; 0];
       [1; 1; 3; 3; 2]]
    let a = {
      width = 5
      height = 5
      values = v
    }
    JsonHelper.areEqual a r

  [<TestMethod; Timeout(10000)>]
  member __.``Problem2. Mandelbrot with toJsonString Test 2`` () =
    let r = computeMandelbrot 20 20 100 -2.5 1.0 -2.0 2.0 |> toJsonString
    let v =
      [[1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 2; 2; 3; 3; 3; 3; 3; 3; 3; 3; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 4; 4; 6; 11; 4; 3; 3; 2; 2];
       [1; 1; 1; 1; 2; 3; 3; 3; 3; 4; 4; 5; 6; 55; 0; 6; 5; 3; 3; 2];
       [1; 1; 1; 1; 3; 3; 3; 3; 4; 5; 6; 14; 26; 0; 0; 0; 15; 5; 3; 3];
       [1; 1; 1; 1; 3; 3; 4; 10; 7; 7; 8; 0; 0; 0; 0; 0; 0; 7; 3; 3];
       [1; 1; 1; 3; 4; 5; 5; 12; 0; 0; 16; 0; 0; 0; 0; 0; 0; 6; 4; 3];
       [1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 12; 5; 4; 3];
       [1; 1; 1; 3; 4; 5; 5; 12; 0; 0; 16; 0; 0; 0; 0; 0; 0; 6; 4; 3];
       [1; 1; 1; 1; 3; 3; 4; 10; 7; 7; 8; 0; 0; 0; 0; 0; 0; 7; 3; 3];
       [1; 1; 1; 1; 3; 3; 3; 3; 4; 5; 6; 14; 26; 0; 0; 0; 15; 5; 3; 3];
       [1; 1; 1; 1; 2; 3; 3; 3; 3; 4; 4; 5; 6; 55; 0; 6; 5; 3; 3; 2];
       [1; 1; 1; 1; 1; 2; 3; 3; 3; 3; 3; 4; 4; 6; 11; 4; 3; 3; 2; 2];
       [1; 1; 1; 1; 1; 1; 2; 2; 3; 3; 3; 3; 3; 3; 3; 3; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2];
       [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2]]
    let a = {
      width = 20
      height = 20
      values = v
    }
    JsonHelper.areEqual a r
